Copyright (C) 2000  Internet Software Consortium.
See COPYRIGHT in the source root or http://isc.org/copyright.html for terms.

                   BIND 8 to BIND 9 Migration Notes

BIND 9 is designed to be mostly upwards compatible with BIND 8, but
there is still a number of caveats you should be aware of when
upgrading an existing BIND 8 installation to use BIND 9.


1. Configuration File Compatibility

1.1. Unimplemented Options and Changed Defaults

BIND 9.0.0 supports most, but not all but not of the named.conf
options of BIND 8.  Unimplemented options include those for selective
(per-domain) forwarding, sortlists, statistics, and process limits;
for a complete list, see doc/misc/options.  We plan to implement most
of these in in BIND 9.1.

If your named.conf file uses an unimplemented option, named will log a
warning message.  A message is also logged about each option whose
default has changed unless the option is set explicitly in named.conf.

In particular, if you see a warning message about the default for the
"auth-nxdomain" option having changed, you can suppress it by adding
one of the following lines to the named.conf options { } block:

   auth-nxdomain no;	# conform to RFC1035
   auth-nxdomain yes;	# do what BIND 8 did by default

1.2. Handling of Configuration File Errors

In BIND 9, named refuses to start if it detects an error in
named.conf.  Earlier versions would start despite errors, causing the
server to run with a partial configuration.  Errors detected during
subsequent reloads do not cause the server to exit.

1.3. Logging

The set of logging categories in BIND 9 is different from that
in BIND 8.  If you have customized your logging on a per-category
basis, you need to modify your logging statement to use the
new categories.

Another difference is that the "logging" statement only takes effect
after the entire named.conf file has been read.  This means that when
the server starts up, any messages about errors in the configuration
file are always logged to the default destination (syslog) when the
server first starts up, regardless of the contents of the "logging"
statement.  In BIND 8, the new logging configuration took effect
immediately after the "logging" statement was read.

1.4. Case sensitivity

In BIND 9, ACL names are case sensitive.  In BIND 8 they were case
insensitive.


2. Zone File Compatibility

2.1. Strict RFC1035 Interpretation of TTLs in Zone Files

BIND 8 allowed you to omit all TTLs from a zone file, and used the
value of the SOA MINTTL field as a default for missing TTL values.

BIND 9 enforces strict compliance with the RFC1035 and RFC2308 TTL
rules.  The default TTL is the value specified with the $TTL
directive, or the previous explicit TTL if there is no $TTL directive.
If there is no $TTL directive and the first RR in the file does not
have an explicit TTL field, the error message "no TTL specified" is
logged and loading the zone file fails.

To avoid problems, use a $TTL directive in each zone file.

2.2. Periods in SOA Serial Numbers Deprecated

Some versions of BIND allow SOA serial numbers with an embedded
period, like "3.002", and convert them into integers in a rather
unintuitive way.  This feature is not supported by BIND 9; serial
numbers must be integers.

2.3. Handling of Unbalanced Quotes

TXT records with unbalanced quotes, like 'host TXT "foo', were not
treated as errors in some versions of BIND.  If your zone files
contain such records, you will get potentially confusing error
messages like "unexpected end of file" because BIND 9 will interpret
everything up to the next quote character as a literal string.

2.4. Handling of Line Breaks

Some versions of BIND accept RRs containing line breaks that are not
properly quoted with parentheses, like the following SOA:

	@	IN SOA	ns.example. hostmaster.example.
			( 1 3600 1800 1814400 3600 )

This is not legal master file syntax and will be treated as an error
by BIND 9.  The fix is to move the opening parenthesis to the first
line.

2.5. Unimplemented BIND 8 Extensions

BIND 8 supports a nonstandard master file directive "$GENERATE" for
automatically generating multiple instances of certain RRs from a
template.  This directive is currently unimplemented in BIND 9.


3. Interoperability Impact of New Protocol Features

BIND 9 uses EDNS0 (RFC2671) to advertise its receive buffer size.  It
also sets the AD bit in queries to indicate that it wishes to receive
DNSSEC responses (this usage of the AD bit is not yet standard, but
hopefully it will be soon).

Most older servers that do not support EDNS0 and/or DNSSEC, including
all known versions of BIND, will send a FORMERR or NOTIMP response to
these queries.  When this happens, BIND 9 will automatically retry the
query without EDNS0 and AD.

Unfortunately, there exists at least one non-BIND name server
implementation that silently ignores these queries instead of sending
an error response.  Resolving names in zones where all or most
authoritative servers use this server will be very slow or fail
completely.  We have contacted the manufacturer of the name server in
case and are trying to resolve the issue with them.


4. Unrestricted Character Set

BIND 9 does not restrict the character set of domain names - it is
fully 8-bit clean in accordance with RFC2181 section 11.

It is strongly recommended that hostnames published in the DNS follow
the RFC952 rules, but BIND 9 will not enforce this restriction.

Historically, some applications have suffered from security flaws
where data originating from the network, such as names returned by
gethostbyaddr(), are used with insufficient checking and may cause a
breach of security when containing unexpected characters; see
<http://www.cert.org/advisories/CA-96.04.corrupt_info_from_servers.html>
for details.  Some earlier versions of BIND attempt to protect these
flawed applications from attack by discarding data containing
characters deemed inappropriate in host names or mail addresses, under
the control of the "check-names" option in named.conf and/or "options
no-check-names" in resolv.conf.  BIND 9 provides no such protection;
if applications with these flaws are still being used, they should
be upgraded.


5. Server Administration Tools

The "ndc" program has been replaced by "rndc", which is capable of
remote operation.  Unlike ndc, rndc requires a configuration file; 
see the man pages in doc/man/bin/rndc.1 and doc/man/bin/rndc.conf.5 for
details.  Many of the ndc commands are still unimplemented in rndc.


$Id: migration,v 1.1.2.11 2000/09/18 23:41:29 gson Exp $
